process PROD  = {

  	source = PoolSource {
    		untracked vstring fileNames = { "file:evtgen_detsim_digi.root" }
    		untracked int32 maxEvents = -1
  	}


        module out = PoolOutputModule {
            untracked string fileName = 'evtgen_jets.root'
            untracked vstring outputCommands = 
          {
            "keep *",
            "drop *_muoncscdigi_*_*",
            "drop *_muondtdigi_*_*",
            "drop *_stripdigi_*_*",
            "drop *_pixdigi_*_*",
            "drop *_hcaldigi_*_*",
            "drop *_ecaldigi_*_*",
            "drop *_SimG4Object_*_*"
          }
        } 
	
   es_module = EcalPreshowerGeometryEP {}
   es_module = EcalBarrelGeometryEP {}
   es_module = EcalEndcapGeometryEP {}
   es_module = HcalHardcodeGeometryEP {}
   es_module = CaloTowerHardcodeGeometryEP {}
   es_module = CaloGeometryBuilder {}
   es_module = CaloTowerTopologyBuilder {}
   es_module = HcalTopologyIdealEP {}

#HCAL calibrations
   es_module = HcalDbProducer {}
   es_source es_hardcode = HcalHardcodeCalibrations 
   {
      untracked vstring toGet = 
      {
         "Pedestals", "PedestalWidths", 
	 "Gains", "GainWidths", 
	 "QIEShape", "QIEData", 
	 "ChannelQuality", "ElectronicsMap"
      }
   }

      #Geometry
   #
   es_source = XMLIdealGeometryESSource 
   { 
      FileInPath GeometryConfiguration = "Geometry/CMSCommonData/data/simConfiguration.xml"
      #the proper root node is set in the xml file
      string rootNodeName = ""
   }
   es_module = TrackerGeometricDetESModule {}

#Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # include "SimGeneral/HepPDTESSource/data/pdt.cfi"
   es_source = HepPDTESSource {
     string pdtFileName = "/afs/cern.ch/cms/external/lcg/external/HepPDT/2.02.02/slc3_ia32_gcc323/data/PDG_mass_width_2004.mc"
   } 

# this one makes candidates from generator partigles
   module genCandidates = HepMCCandidateProducer {
# pick right source - different for different generators
   	# string src = "PythiaSource"
   	string src = "FlatRandomPtGunSource"
        untracked bool verbose = false
        bool stableOnly = true
    	vstring excludeList = { "nu(e)0", "nu(mu)0", "nu(tau)0", "mu-", "K(L)0", "n0" }
  }

#
# Calorimetry
#
###################################################################
 # Get hardcoded conditions the same used for standard digitization
  es_source = EcalTrivialConditionRetriever {
       #untracked double adcToGeVEBConstant = 0.0286
      untracked double adcToGeVEBConstant = 0.0636
  }
 ###################################################################


 #######################################################################################	
 # EB+EE uncalibrated RecHit producer 
 # Weight method (CMS standard requires tuned weights) 	
 include "RecoLocalCalo/EcalRecProducers/data/EcalWeightUncalibratedRecHitProducer.cfi"	
 # Analytic fit (much slower does not require weights) 	
 # include "RecoLocalCalo/EcalRecProducers/data/EcalAnalFitUncalibratedRecHitProducer.cfi"	
 #######################################################################################

 #######################################################################################
 # EB+EE RecHit producer (from uncalibrated RecHit)
 include "RecoLocalCalo/EcalRecProducers/data/EcalRecHitProducer.cfi"	
 #######################################################################################

 #######################################################################################
 # ES RecHit producer (from Digis)
 include "RecoLocalCalo/EcalRecProducers/data/ESRecHitProducer.cfi"	
 #######################################################################################


   # HBHE rechit producer
   module recohbhe = HcalSimpleReconstructor {
          int32 firstSample = 4
          int32 samplesToAdd = 4
          string Subdetector = 'HBHE'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }

   # HO rechit producer
   module recoho = HcalSimpleReconstructor {
          int32 firstSample = 4
          int32 samplesToAdd = 4
          string Subdetector = 'HO'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }

   # HF rechit producer
   module recohf = HcalSimpleReconstructor {
          int32 firstSample = 2
          int32 samplesToAdd = 2
          string Subdetector = 'HF'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }


# this one makes CaloTowers
   module towermaker = CaloTowersCreator {
      double HBThreshold = 0.9     // GeV, Scheme B
      double HOThreshold = 1.1     // GeV, Scheme B
      double HESThreshold = 1.4    // GeV, Scheme B
      double HEDThreshold = 1.4    // GeV, Scheme B
      double HF1Threshold = 0.5    // GeV, ORCA value
      double HF2Threshold = 0.5    // GeV, ORCA value
      double EBThreshold = 0.09    // GeV, ORCA value w/o selective readout
      double EEThreshold = 0.45    // GeV, ORCA value w/o selective readout
      
      double EBSumThreshold = 0.2  // GeV, Scheme B
      double EESumThreshold = 0.45 // GeV, Scheme B
      double HcalThreshold = -1000 // GeV, -1000 means cut not used 
      double EcutTower = -1000     // GeV, -1000 means cut not used
      double EBWeight = 1.0
      double EEWeight = 1.0
      double HBWeight = 1.0
      double HESWeight = 1.0
      double HEDWeight = 1.0
      double HOWeight = 1.0
      double HF1Weight = 1.0
      double HF2Weight = 1.0
      bool UseHO = true
      string hbheInput = "recohbhe"
      string hoInput = "recoho"
      string hfInput = "recohf"
      vstring ecalInputs = {"ecalrechit/EcalRecHitsEB", "ecalrechit/EcalRecHitsEE" }
      untracked bool AllowMissingInputs = true
   }

# this one makes candidates from CaloTowers
   module caloTowers = CaloTowerCandidateCreator {
          string src = "towermaker"
   }
  
   block mcone_jet_parameters = {
          untracked int32 debugLevel = 1
          double seedThreshold = 3.0
          double towerThreshold = 1.0
          double coneAreaFraction = 1.0
          int32 maxPairSize = 2
          int32 maxIterations = 100
          double overlapThreshold = .75
   }

   block kt_jet_parameters = {
          int32 ktAngle = 2
          int32 ktRecom = 1
          double ktECut = 1.0
          double ktRParam = 1.0
   }
           
   module mcone5 =  MidpointJetProducer {
          using mcone_jet_parameters
          double coneRadius = 0.5
          string src = "caloTowers"
          untracked string jetType = "CaloJet"
   }

   module mcone7 =  MidpointJetProducer {
          using mcone_jet_parameters
          double coneRadius = 0.7
          string src = "caloTowers"
          untracked string jetType = "CaloJet"
   }

   module ktjet =  KtJetProducer {
          using kt_jet_parameters
          string src = "caloTowers"
	  untracked string jetType = "CaloJet"
         }

   module mcone5gen =  MidpointJetProducer {
          using mcone_jet_parameters
          double coneRadius = 0.5
          string src = "genCandidates"
          untracked string jetType = "GenJet"
   }

   module mcone7gen =  MidpointJetProducer {
          using mcone_jet_parameters
          double coneRadius = 0.7
          string src = "genCandidates"
          untracked string jetType = "GenJet"
   }

   module ktjetgen =  KtJetProducer {
          using kt_jet_parameters
          string src = "genCandidates"
          untracked string jetType = "GenJet"
         }

   # Now order modules execution
   #
   sequence doHReco  = { recohbhe, recoho, recohf }
   sequence doEReco  = { ecaluncalibrechit, ecalrechit }
   sequence doRecoJets = {towermaker, caloTowers, mcone5, mcone7, ktjet}
   sequence doGenJets = {genCandidates, mcone5gen, mcone7gen, ktjetgen}
   path p1 = {doEReco, doHReco, doGenJets, doRecoJets}
   endpath outpath = { out }
		
}		
